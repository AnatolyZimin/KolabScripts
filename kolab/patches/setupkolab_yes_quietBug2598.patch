diff --git a/pykolab/conf/__init__.py b/pykolab/conf/__init__.py
index 239c0dd..bc793e1 100644
--- a/pykolab/conf/__init__.py
+++ b/pykolab/conf/__init__.py
@@ -278,6 +278,12 @@ class Conf(object):
                                     help    = _("Set the debugging " + \
                                         "verbosity. Maximum is 9, tracing " + \
                                         "protocols like LDAP, SQL and IMAP."))
+        
+        runtime_group.add_option(   "-e", "--default",
+                                    dest    = "answer_default",
+                                    action  = "store_true",
+                                    default = False,
+                                    help    = _("Use the default answer to all questions."))
 
         runtime_group.add_option(   "-l",
                                     dest    = "loglevel",
diff --git a/pykolab/utils.py b/pykolab/utils.py
index 5cba8f9..d2c6b44 100644
--- a/pykolab/utils.py
+++ b/pykolab/utils.py
@@ -29,6 +29,7 @@ from pykolab import constants
 from pykolab.translate import _
 
 log = pykolab.getLogger('pykolab.utils')
+conf = pykolab.getConf()
 
 def ask_question(question, default="", password=False, confirm=False):
     """
@@ -41,6 +42,12 @@ def ask_question(question, default="", password=False, confirm=False):
 
         Usage: pykolab.utils.ask_question("What is the server?", default="localhost")
     """
+    
+    if not default == "" and not default == None and conf.cli_keywords.answer_default:
+        if not conf.cli_keywords.quiet:
+            print ("%s [%s]: " % (question, default))
+        return default
+
     if password:
         if default == "" or default == None:
             answer = getpass.getpass("%s: " % (question))
@@ -107,6 +114,14 @@ def ask_confirmation(question, default="y", all_inclusive_no=True):
         default_no = "'no'"
         default_yes = "Please type 'yes'"
 
+    if conf.cli_keywords.answer_yes or (conf.cli_keywords.answer_default and default_answer is not None):
+        if not conf.cli_keywords.quiet:
+            print ("%s [%s/%s]: " % (question,default_yes,default_no))
+        if conf.cli_keywords.answer_yes:
+            return True
+        if conf.cli_keywords.answer_default:
+            return default_answer
+
     answer = False
     while answer == False:
         answer = raw_input("%s [%s/%s]: " % (question,default_yes,default_no))
@@ -128,6 +143,11 @@ def ask_confirmation(question, default="y", all_inclusive_no=True):
                 return True
 
 def ask_menu(question, options={}, default=''):
+    if not default == '' and conf.cli_keywords.answer_default:
+        if not conf.cli_keywords.quiet:
+            print question + " [" + default + "]:"
+        return default
+
     if not default == '':
         print question + " [" + default + "]:"
     else:
@@ -258,6 +278,9 @@ def generate_password():
 def multiline_message(message):
     _msg = ""
 
+    if conf.cli_keywords.quiet:
+        return ""
+
     column_width = 80
 
     # First, replace all occurences of "\n"
