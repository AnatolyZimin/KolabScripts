diff --git a/lib/Auth.php b/lib/Auth.php
index f91198a..f63a591 100644
--- a/lib/Auth.php
+++ b/lib/Auth.php
@@ -214,6 +214,11 @@ class Auth {
         return $this->auth_instance()->domain_add($domain, $domain_attrs);
     }
 
+    public function domainadmin_get_number_of_accounts($domainadmin)
+    {
+        return $this->auth_instance()->domainadmin_get_number_of_accounts($domainadmin);
+    }
+
     public function domain_edit($domain, $attributes, $typeid = null)
     {
         return $this->auth_instance()->domain_edit($domain, $attributes, $typeid);
diff --git a/lib/Auth/LDAP.php b/lib/Auth/LDAP.php
index f105e5f..105ac95 100644
--- a/lib/Auth/LDAP.php
+++ b/lib/Auth/LDAP.php
@@ -663,6 +663,26 @@ class LDAP extends Net_LDAP3 {
         return $quota;
     }
 
+    // get the number of accounts that this domainadmin manages.
+    public function domainadmin_get_number_of_accounts($domainadmin)
+    {
+        $numberOfAccounts = 0;
+        $domains = $this->domainadmin_get_domains($domainadmin);
+        foreach ($domains as $domain) {
+            // get all users that are part of this domain
+            $users_result = $this->_search(
+                               $this->_standard_root_dn($domain),
+                               "objectclass=kolabinetorgperson",
+                               array($this->conf->get("quota_attribute")));
+            if ($users_result != null && count($users_result) > 0) {
+               $users = $users_result->entries(true);
+               $numberOfAccounts += count($users);
+            }
+        }
+
+        return $numberOfAccounts;
+    }
+
     public function domain_edit($domain, $attributes, $typeid = null)
     {
         $domain = $this->domain_info($domain, array_keys($attributes));
diff --git a/lib/api/kolab_api_service_user.php b/lib/api/kolab_api_service_user.php
index 7b6bd0e..593351f 100644
--- a/lib/api/kolab_api_service_user.php
+++ b/lib/api/kolab_api_service_user.php
@@ -70,6 +70,46 @@ class kolab_api_service_user extends kolab_api_service
     }
 
     /**
+     * check if the domain admin is allowed to add another account.
+     * using tbitsKolabMaxAccounts from LDAP
+     *
+     * @throws an exception if maximum number of accounts has been reached
+     */
+    private function validate_user_add()
+    {
+        $auth = Auth::get_instance();
+        $conf = Conf::get_instance();
+
+        // get domain admin for the current domain, and the mailquota of the domain admin
+        $domaindetails = array_shift(array_values($auth->domain_info($_SESSION['user']->get_domain(), array('domainadmin'))));
+        $domainadmins = $domaindetails['domainadmin'];
+        unset($domainadminmaxaccounts);
+        foreach ($domaindetails['domainadmin'] as $domainadmin) {
+            // ignore cn=Directory Manager
+            if ($domainadmin != $conf->get('bind_dn')) {
+                $userinfo = array_shift(array_values($auth->user_info($domainadmin, array($quota_attribute))));
+                if (isset($userinfo['tbitskolabmaxaccounts'])) {
+                    // what about multiple domain admins of one domain?
+                    if (isset($domainadminmaxaccounts)) {
+                          throw new Exception('error: only one domainadmin can have a maximum account number specified');
+                    }
+                    $domainadminmaxaccounts = $userinfo['tbitskolabmaxaccounts'];
+                    $maindomainadmin = $domainadmin;
+                }
+            }
+        }
+
+        if (isset($domainadminmaxaccounts)) {
+            $numberOfAccounts = $auth->domainadmin_get_number_of_accounts($maindomainadmin);
+            if ($numberOfAccounts >= $domainadminmaxaccounts) {
+                  throw new Exception('error: Cannot create another account.<br/>'.
+                      'maximum accounts booked: '.$domainadminmaxaccounts.'<br/>'.
+                      'Please order more accounts!');
+            }
+        }
+    }
+
+    /**
      * Create user.
      *
      * @param array $get   GET parameters
@@ -81,6 +121,9 @@ class kolab_api_service_user extends kolab_api_service
     {
         //console("user_add()", $postdata);
 
+        // check if the domainadmin is allowed to add more accounts
+        $this->validate_user_add();
+
         $user_attributes = $this->parse_input_attributes('user', $postdata);
 
         //console("user_add()", $user_attributes);
