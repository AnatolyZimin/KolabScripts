diff --git a/lib/Auth.php b/lib/Auth.php
index f253185..cf79182 100644
--- a/lib/Auth.php
+++ b/lib/Auth.php
@@ -219,6 +219,11 @@ class Auth {
         return $this->auth_instance()->domainadmin_get_quota($domainadmin, $excludeuser);
     }
 
+    public function domainadmin_get_number_of_accounts($domainadmin)
+    {
+        return $this->auth_instance()->domainadmin_get_number_of_accounts($domainadmin);
+    }
+
     public function domain_edit($domain, $attributes, $typeid = null)
     {
         return $this->auth_instance()->domain_edit($domain, $attributes, $typeid);
diff --git a/lib/Auth/LDAP.php b/lib/Auth/LDAP.php
index db020bd..4b8c854 100644
--- a/lib/Auth/LDAP.php
+++ b/lib/Auth/LDAP.php
@@ -620,6 +620,28 @@ class LDAP extends Net_LDAP3 {
         return $quota;
     }
 
+    // get the number of accounts that this domainadmin manages.
+    public function domainadmin_get_number_of_accounts($domainadmin)
+    {
+        $numberOfAccounts = 0;
+        $domains = $this->domainadmin_get_domains($domainadmin);
+        foreach ($domains as $associateddomain) {
+            $domain = substr($associateddomain, strlen("associateddomain="));
+            $domain = substr($domain, 0, strpos($domain, ','));
+            // get all users that are part of this domain
+            $users_result = $this->_search(
+                               $this->_standard_root_dn($domain),
+                               "objectclass=kolabinetorgperson",
+                               array($this->conf->get("quota_attribute")));
+            if ($users_result != null && count($users_result) > 0) {
+               $users = $users_result->entries(true);
+               $numberOfAccounts += count($users);
+            }
+        }
+
+        return $numberOfAccounts;
+    }
+
     public function domain_edit($domain, $attributes, $typeid = null)
     {
         $domain = $this->domain_info($domain, array_keys($attributes));
--- a/lib/Auth/LDAP.php
+++ b/lib/Auth/LDAP.php
@@ -484,6 +484,20 @@
 
         $this->add_entry($dn, $attrs);
 
+        $dn = 'cn=enable-groupware-features,' . $inetdomainbasedn;
+        $attrs = array(
+            'objectclass' => array(
+                'top',
+                'ldapsubentry',
+                'nsroledefinition',
+                'nssimpleroledefinition',
+                'nsmanagedroledefinition',
+            ),
+            'cn' => 'enable-groupware-features'
+        );
+
+        $this->add_entry($dn, $attrs);
+
         $domain = $this->domain_info($domain, array_keys($attributes));
 
         if (empty($domain)) {
diff --git a/lib/api/kolab_api_service_domain.php b/lib/api/kolab_api_service_domain.php
index 4d5fcaa..92aaf4a 100644
--- a/lib/api/kolab_api_service_domain.php
+++ b/lib/api/kolab_api_service_domain.php
@@ -235,4 +235,60 @@ class kolab_api_service_domain extends kolab_api_service
 
         return false;
     }
+
+    /**
+     * get the default quota for a domain, specified in the TBits ISP LDAP attribute of the domain admin
+     *
+     * @param array $get   GET parameters
+     * @param array $post  POST parameters
+     *
+     * @return array|bool default quota, False on error
+     */
+    public function domain_defaultquota($getdata, $postdata)
+    {
+        Log::trace("domain.defaultquota(\$getdata = '" . var_export($getdata, TRUE) . "', \$postdata = '" . var_export($postdata, TRUE) . "')");
+
+        if (empty($getdata['id'])) {
+            Log::error("domain.defaultquota called without a Domain ID");
+            return false;
+        }
+
+        $auth   = Auth::get_instance();
+        $conf = Conf::get_instance();
+        $result = $auth->domain_info($getdata['id']);
+
+        // normalize result
+        $result = $this->parse_result_attributes('domain', $result);
+
+        if (empty($result['id'])) {
+            $result['id'] = $getdata['id'];
+        }
+
+        if ($result) {
+
+            // get domain admin for the current domain, and the default mailquota of the domain admin
+            unset($defaultdomainquota);
+            foreach ($result['domainadmin'] as $domainadmin) {
+                // ignore cn=Directory Manager
+                if ($domainadmin != $conf->get('bind_dn')) {
+                    $userinfo = array_shift(array_values($auth->user_info($domainadmin, array($quota_attribute))));
+                    if (isset($userinfo['tbitskolabdefaultquota'])) {
+                        // what about multiple domain admins of one domain?
+                        if (isset($defaultdomainquota)) {
+                              throw new Exception('error: only one domainadmin can have a default mailquota specified');
+                        }
+                        $defaultdomainquota = $userinfo['tbitskolabdefaultquota'];
+                    }
+                }
+            }
+
+            if (isset($defaultdomainquota)) {
+                $result['defaultquota'] = $defaultdomainquota;
+            }
+
+            return $result;
+        }
+        
+        return false;
+    }
 }
diff --git a/lib/api/kolab_api_service_form_value.php b/lib/api/kolab_api_service_form_value.php
index 82bde53..4d2a8cc 100644
--- a/lib/api/kolab_api_service_form_value.php
+++ b/lib/api/kolab_api_service_form_value.php
@@ -1219,6 +1219,61 @@ class kolab_api_service_form_value extends kolab_api_service
         return 'OK';
     }

+    private function validate_nsroledn($value, $postdata = array(), $validation_type = null)
+    {
+        foreach ($value as $element) {
+            if (strpos($element, "cn=enable-groupware-features") !== false) {
+                $conf = Conf::get_instance();
+                $auth = Auth::get_instance();
+
+                // get domain admin for the current domain, and the value of the flag tbitskolaballowgroupware
+                $domaindetails = array_shift(array_values($auth->domain_info($_SESSION['user']->get_domain(), array('domainadmin'))));
+                $domainadmins = $domaindetails['domainadmin'];
+                unset($tbitskolaballowgroupware);
+                foreach ($domaindetails['domainadmin'] as $domainadmin) {
+                    // ignore cn=Directory Manager
+                    if ($domainadmin != $conf->get('bind_dn')) {
+                        $userinfo = array_shift(array_values($auth->user_info($domainadmin, array("tbitskolaballowgroupware"))));
+                        if (isset($userinfo["tbitskolaballowgroupware"])) {
+                            // what about multiple domain admins of one domain?
+                            if (isset($tbitskolaballowgroupware) && $tbitskolaballowgroupware != $userinfo["tbitskolaballowgroupware"]) {
+                                  throw new Exception('error: domainadmins have contradicting settings for tbitskolaballowgroupware');
+                            }
+                            $tbitskolaballowgroupware = $userinfo["tbitskolaballowgroupware"];
+                        }
+                    }
+                }
+
+                if (isset($tbitskolaballowgroupware) && $tbitskolaballowgroupware == "FALSE") {
+                    throw new Exception('error: the domain admin does not have permissions to enable groupware features!');
+                }
+            }
+        }
+    }
+ 
+    private function validate_quota($value, $postdata = array(), $validation_type = null)
+    {
+        // convert MB/GB into KB
+        if (preg_match('/^([0-9]+)\s*(KB|MB|GB)$/i', $value, $m)) {
+            switch (strtoupper($m[2])) {
+            case 'KB': $value = $m[1]; break;
+            case 'MB': $value = $m[1] * 1024; break;
+            case 'GB': $value = $m[1] * 1024 * 1024; break;
+            }
+        }
+        return (string) intval($value);
+    }
+
+    private function validate_tbitskolaboverallquota($value, $postdata = array(), $validation_type = null)
+    {
+        return $this->validate_quota($value, $postdata, $validation_type);
+    }
+
+    private function validate_tbitskolabdefaultquota($value, $postdata = array(), $validation_type = null)
+    {
+        return $this->validate_quota($value, $postdata, $validation_type);
+    }
+ 
     private function validate_mailquota($value, $postdata = array(), $validation_type = null)
     {
         // convert MB/GB into KB
diff --git a/lib/api/kolab_api_service_user.php b/lib/api/kolab_api_service_user.php
index 7b6bd0e..593351f 100644
--- a/lib/api/kolab_api_service_user.php
+++ b/lib/api/kolab_api_service_user.php
@@ -70,6 +70,46 @@ class kolab_api_service_user extends kolab_api_service
     }
 
     /**
+     * check if the domain admin is allowed to add another account.
+     * using tbitsKolabMaxAccounts from LDAP
+     *
+     * @throws an exception if maximum number of accounts has been reached
+     */
+    private function validate_user_add()
+    {
+        $auth = Auth::get_instance();
+        $conf = Conf::get_instance();
+
+        // get domain admin for the current domain, and the mailquota of the domain admin
+        $domaindetails = array_shift(array_values($auth->domain_info($_SESSION['user']->get_domain(), array('domainadmin'))));
+        $domainadmins = $domaindetails['domainadmin'];
+        unset($domainadminmaxaccounts);
+        foreach ($domaindetails['domainadmin'] as $domainadmin) {
+            // ignore cn=Directory Manager
+            if ($domainadmin != $conf->get('bind_dn')) {
+                $userinfo = array_shift(array_values($auth->user_info($domainadmin, array($quota_attribute))));
+                if (isset($userinfo['tbitskolabmaxaccounts'])) {
+                    // what about multiple domain admins of one domain?
+                    if (isset($domainadminmaxaccounts)) {
+                          throw new Exception('error: only one domainadmin can have a maximum account number specified');
+                    }
+                    $domainadminmaxaccounts = $userinfo['tbitskolabmaxaccounts'];
+                    $maindomainadmin = $domainadmin;
+                }
+            }
+        }
+
+        if (isset($domainadminmaxaccounts)) {
+            $numberOfAccounts = $auth->domainadmin_get_number_of_accounts($maindomainadmin);
+            if ($numberOfAccounts >= $domainadminmaxaccounts) {
+                  throw new Exception('error: Cannot create another account.<br/>'.
+                      'maximum accounts booked: '.$domainadminmaxaccounts.'<br/>'.
+                      'Please order more accounts!');
+            }
+        }
+    }
+
+    /**
      * Create user.
      *
      * @param array $get   GET parameters
@@ -81,6 +121,9 @@ class kolab_api_service_user extends kolab_api_service
     {
         //console("user_add()", $postdata);
 
+        // check if the domainadmin is allowed to add more accounts
+        $this->validate_user_add();
+
         $user_attributes = $this->parse_input_attributes('user', $postdata);
 
         //console("user_add()", $user_attributes);
